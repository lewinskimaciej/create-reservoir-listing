/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * beam-reservoir API
 * You are viewing the reference docs for the beam-reservoir API.        For a more complete overview with guides and examples, check out the <a href='https://reservoirprotocol.github.io'>Reservoir Protocol Docs</a>.
 * OpenAPI spec version: 5.296.1
 */
import type {
  GetAdminProvidermetadataTypeParams,
  GetAdminRatelimitrulesParams,
  GetApiKeyRateLimitsResponse,
  GetAsksEventsV2Response,
  GetAsksEventsV3Response,
  GetAssetsV1Params,
  GetAttributesAllV2Response,
  GetAttributesAllV3Response,
  GetAttributesAllV4Response,
  GetAttributesExploreV2Response,
  GetAttributesExploreV3Response,
  GetAttributesExploreV4Response,
  GetAttributesExploreV5Response,
  GetAttributesStaticV1Response,
  GetAttributesV1Params,
  GetAttributesV1Response,
  GetBidEventsV1Response,
  GetBidEventsV2Response,
  GetBidEventsV3Response,
  GetChainStatsV5Response,
  GetCollectionActivityV2Response,
  GetCollectionActivityV3Response,
  GetCollectionActivityV4Response,
  GetCollectionActivityV5Response,
  GetCollectionActivityV6Response,
  GetCollectionAttributesV1Response,
  GetCollectionBidAskMidpointOracleV1Response,
  GetCollectionDeprecatedV1Response,
  GetCollectionFloorAskOracleV4Response,
  GetCollectionFloorAskOracleV6Response,
  GetCollectionOwnersDistributionV1Response,
  GetCollectionTopBidOracleV2Response,
  GetCollectionTopBidsV1Response,
  GetCollectionV1Params,
  GetCollectionV1Response,
  GetCollectionV2Params,
  GetCollectionV2Response,
  GetCollectionV3Params,
  GetCollectionV3Response,
  GetCollectionsActivityV4Params,
  GetCollectionsActivityV5Params,
  GetCollectionsActivityV6Params,
  GetCollectionsCollectionActivityV1Params,
  GetCollectionsCollectionActivityV2Params,
  GetCollectionsCollectionActivityV3Params,
  GetCollectionsCollectionAttributesAllV4Params,
  GetCollectionsCollectionAttributesExploreV1Params,
  GetCollectionsCollectionAttributesExploreV2Params,
  GetCollectionsCollectionAttributesExploreV3Params,
  GetCollectionsCollectionAttributesExploreV4Params,
  GetCollectionsCollectionAttributesExploreV5Params,
  GetCollectionsCollectionAttributesV1Params,
  GetCollectionsCollectionMarketplaceconfigurationsV1Params,
  GetCollectionsCollectionSupportedmarketplacesV1Params,
  GetCollectionsDailyvolumesV1Params,
  GetCollectionsFloorAskV1Response,
  GetCollectionsFloorAskV2Response,
  GetCollectionsSetOwnersDistributionV1Response,
  GetCollectionsTopbidV1Response,
  GetCollectionsTopbidV2Response,
  GetCollectionsTopsellingV1Params,
  GetCollectionsTopsellingV2Params,
  GetCollectionsTrendingV1Params,
  GetCollectionsTrendingmintsV1Params,
  GetCollectionsV1Params,
  GetCollectionsV1Response,
  GetCollectionsV2Params,
  GetCollectionsV2Response,
  GetCollectionsV3Params,
  GetCollectionsV3Response,
  GetCollectionsV4Params,
  GetCollectionsV4Response,
  GetCollectionsV5Params,
  GetCollectionsV5Response,
  GetCollectionsV6Params,
  GetCollectionsV6Response,
  GetCollectionsV7Params,
  GetCollectionsV7Response,
  GetCommonCollectionsOwnersV1Response,
  GetCrossCollectionsOwnersV1Response,
  GetCrossPostingOrdersV1Response,
  GetCrosspostingordersV1Params,
  GetCurrenciesConversionV1Params,
  GetCurrencyConversionV1Response,
  GetDailyVolumesV1Response,
  GetEventsAsksV2Params,
  GetEventsAsksV3Params,
  GetEventsBidsV1Params,
  GetEventsBidsV2Params,
  GetEventsBidsV3Params,
  GetEventsCollectionsFlooraskV1Params,
  GetEventsCollectionsFlooraskV2Params,
  GetEventsCollectionsTopbidV1Params,
  GetEventsCollectionsTopbidV2Params,
  GetEventsOrdersV1Params,
  GetEventsTokensFlooraskV2Params,
  GetEventsTokensFlooraskV3Params,
  GetEventsTokensFlooraskV4Params,
  GetExecuteBidV4Response,
  GetExecuteBidV5Response,
  GetExecuteBuyV5Response,
  GetExecuteBuyV6Response,
  GetExecuteBuyV7Response,
  GetExecuteCancelV2Params,
  GetExecuteCancelV2Response,
  GetExecuteCancelV3Response,
  GetExecuteListV4Response,
  GetExecuteListV5Response,
  GetExecuteSellV7Response,
  GetFlaggedTokensV1Response,
  GetLiquidityUsersV1Params,
  GetLiquidityUsersV2Params,
  GetMarketplacesv1Resp,
  GetNewApiKeyResponse,
  GetOracleCollectionsBidaskmidpointV1Params,
  GetOracleCollectionsFlooraskV4Params,
  GetOracleCollectionsFlooraskV5Params,
  GetOracleCollectionsFlooraskV6Params,
  GetOracleCollectionsTopbidV2Params,
  GetOracleCollectionsTopbidV3Params,
  GetOracleTokensStatusV2Params,
  GetOracleTokensStatusV3Params,
  GetOrderEventsV1Response,
  GetOrdersAllV1Params,
  GetOrdersAllV1Response,
  GetOrdersAllV2Params,
  GetOrdersAllV2Response,
  GetOrdersAsksV1Params,
  GetOrdersAsksV1Response,
  GetOrdersAsksV2Params,
  GetOrdersAsksV3Params,
  GetOrdersAsksV3Response,
  GetOrdersAsksV4Params,
  GetOrdersAsksV4Response,
  GetOrdersAsksV5Params,
  GetOrdersBidsV1Params,
  GetOrdersBidsV1Response,
  GetOrdersBidsV2Params,
  GetOrdersBidsV3Params,
  GetOrdersBidsV3Response,
  GetOrdersBidsV4Params,
  GetOrdersBidsV4Response,
  GetOrdersBidsV5Params,
  GetOrdersBidsV5Response,
  GetOrdersBidsV6Params,
  GetOrdersDepthV1Params,
  GetOrdersDepthV1Response,
  GetOrdersExecutedV1Params,
  GetOrdersUsersUserTopbidsV1Params,
  GetOrdersUsersUserTopbidsV2Params,
  GetOrdersUsersUserTopbidsV3Params,
  GetOrdersUsersUserTopbidsV4Params,
  GetOrdersV1Params,
  GetOrdersV1Response,
  GetOrdersV2Params,
  GetOrdersV2Response,
  GetOwnerCountV1Response,
  GetOwnersCommoncollectionsV1Params,
  GetOwnersCountV1Params,
  GetOwnersCrosscollectionsV1Params,
  GetOwnersV1Params,
  GetOwnersV1Response,
  GetOwnersV2Params,
  GetOwnersV2Response,
  GetRedirectLogoV1Params,
  GetRedirectTokenV1Params,
  GetRedirectTokensTokenImageV1Params,
  GetSalesBulkV1Params,
  GetSalesBulkV1Response,
  GetSalesV1Params,
  GetSalesV1Response,
  GetSalesV2Params,
  GetSalesV2Response,
  GetSalesV3Params,
  GetSalesV3Response,
  GetSalesV4Params,
  GetSalesV4Response,
  GetSalesV5Params,
  GetSalesV6Params,
  GetSearchActivitiesV1Params,
  GetSearchActivitiesV1Response,
  GetSearchCollectionsV1Params,
  GetSearchCollectionsV1Response,
  GetSearchCollectionsV2Params,
  GetSearchCollectionsV2Response,
  GetSourcesV1Params,
  GetSourcesV1Response,
  GetStatsV1Params,
  GetStatsV1Response,
  GetStatsV2Params,
  GetStatsV2Response,
  GetSyncAsksV1Params,
  GetTokenActivityV4Response,
  GetTokenActivityV5Response,
  GetTokenStatusOracleV2Response,
  GetTokenStatusOracleV3Response,
  GetTokensBootstrapV1Params,
  GetTokensBootstrapV1Response,
  GetTokensDetailsV2Params,
  GetTokensDetailsV2Response,
  GetTokensDetailsV3Params,
  GetTokensDetailsV3Response,
  GetTokensDetailsV4Params,
  GetTokensDetailsV4Response,
  GetTokensFlagChangesV1Params,
  GetTokensFloorAskV2Response,
  GetTokensFloorAskV3Response,
  GetTokensFloorAskV4Response,
  GetTokensFloorV1Params,
  GetTokensFloorV1Response,
  GetTokensIdsV1Params,
  GetTokensIdsV1Response,
  GetTokensTokenActivityV1Params,
  GetTokensTokenActivityV2Params,
  GetTokensTokenActivityV3Params,
  GetTokensTokenActivityV4Params,
  GetTokensTokenActivityV5Params,
  GetTokensV1Params,
  GetTokensV1Response,
  GetTokensV2Params,
  GetTokensV2Response,
  GetTokensV3Params,
  GetTokensV3Response,
  GetTokensV4Params,
  GetTokensV4Response,
  GetTokensV5Params,
  GetTokensV5Response,
  GetTokensV6Params,
  GetTokensV6Response,
  GetTokensV7Params,
  GetTokensV7Response,
  GetTopSellingCollectionsV1Response,
  GetTopSellingCollectionsV2Response,
  GetTransactionSyncedV1Response,
  GetTransfersBulkV1Params,
  GetTransfersBulkV1Response,
  GetTransfersBulkV2Params,
  GetTransfersV2Params,
  GetTransfersV2Response,
  GetTransfersV3Params,
  GetTransfersV3Response,
  GetTransfersV4Params,
  GetTrendingCollectionsV1Response,
  GetTrendingMintsV1Response,
  GetUserActivityV1Response,
  GetUserActivityV2Response,
  GetUserActivityV3Response,
  GetUserActivityV4Response,
  GetUserActivityV5Response,
  GetUserActivityV6Response,
  GetUserCollectionsV1Response,
  GetUserCollectionsV2Response,
  GetUserCollectionsV3Response,
  GetUserPositionsV1Response,
  GetUserTokensV1Response,
  GetUserTokensV2Response,
  GetUserTokensV3Response,
  GetUserTokensV4Response,
  GetUserTokensV5Response,
  GetUserTokensV6Response,
  GetUserTokensV7Response,
  GetUserTopBidsV1Response,
  GetUserTopBidsV2Response,
  GetUserTopBidsV3Response,
  GetUserTopBidsV4Response,
  GetUsersActivityV2Params,
  GetUsersActivityV3Params,
  GetUsersActivityV4Params,
  GetUsersActivityV5Params,
  GetUsersActivityV6Params,
  GetUsersLiquidityV1Response,
  GetUsersUserActivityV1Params,
  GetUsersUserCollectionsV1Params,
  GetUsersUserCollectionsV2Params,
  GetUsersUserCollectionsV3Params,
  GetUsersUserPositionsV1Params,
  GetUsersUserTokensV1Params,
  GetUsersUserTokensV2Params,
  GetUsersUserTokensV3Params,
  GetUsersUserTokensV4Params,
  GetUsersUserTokensV5Params,
  GetUsersUserTokensV6Params,
  GetUsersUserTokensV7Params,
  Model238,
  Model251,
  Model254,
  Model381,
  Model382,
  Model385,
  Model386,
  Model387Body,
  Model388,
  Model389,
  Model390,
  Model391,
  Model392,
  Model393,
  Model394,
  Model395,
  Model396,
  Model398,
  Model399,
  Model400,
  Model401,
  Model402,
  Model404,
  Model405,
  Model406,
  Model408,
  Model409,
  Model410,
  Model411,
  Model412,
  Model413,
  Model414,
  Model416,
  Model417,
  Model419,
  Model421,
  Model426,
  Model430,
  Model432,
  Model433,
  Model435,
  Model438,
  Model439,
  Model440,
  Model442,
  Model443,
  Model445,
  Model451,
  Model459,
  Model468,
  Model476,
  Model489,
  Model496,
  Model498,
  Model501,
  Model505,
  Model516,
  Model519,
  Model520,
  Model521,
  Model524,
  Model529,
  Model536,
  Model537,
  Model540,
  Model546,
  Model547,
  Model548,
  Model549,
  Model550,
  Model552,
  Model555,
  Model556,
  Model557,
  Model97,
  PostAdminApikeysMetricsBody,
  PostApiKeyMetricsResponse,
  PostApikeysBody,
  PostAuthSignatureV1Response,
  PostCreateCollectionsSetV1Response,
  PostCreateContractsSetV1Response,
  PostExecuteAuthsignatureV1Params,
  PostExecuteCancelimtblV1Params,
  PostExecuteCancelsignatureV1Params,
  PostExecuteMintV1Response,
  PostExecutePermitsignatureV1Params,
  PostExecutePresignatureV1Params,
  PostExecuteResultsV1Response,
  PostExecuteSolveCapacityV1Response,
  PostExecuteSolveV1Params,
  PostExecuteSolveV1Response,
  PostExecuteStatusV1Response,
  PostExecuteTransferV1Response,
  PostOrderV2Params,
  PostOrderV2Response,
  PostOrderV3Params,
  PostOrderV4Params,
  PostOrderV4Response,
  PutSetCollectionCommunityV1Response,
  SyncOrdersAsksV1Response
} from './reservoir.types.generated'
import { client } from './reservoir-axios-client';
import type { BodyType } from './reservoir-axios-client';



// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getBeamReservoirAPI = () => {
/**
 * @summary Get supported marketplaces
 */
const getAdminGetmarketplaces = (
    
 options?: SecondParameter<typeof client>,) => {
      return client<GetMarketplacesv1Resp>(
      {url: `/admin/get-marketplaces`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Get swagger json in OpenApi V3
 */
const getAdminOpenapi = (
    
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/open-api`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Get rate limit rules
 */
const getAdminRatelimitrules = (
    params?: GetAdminRatelimitrulesParams,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/rate-limit-rules`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Return the asset based on the given param
 */
const getAssetsV1 = (
    params: GetAssetsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/assets/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary List of attributes
 */
const getAttributesV1 = (
    params?: GetAttributesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesV1Response>(
      {url: `/attributes/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed information about a single collection, including real-time stats.
 * @deprecated
 * @summary Get detailed information about a single collection
 */
const getCollectionV1 = (
    params?: GetCollectionV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionV1Response>(
      {url: `/collection/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed information about a single collection, including real-time stats.
 * @deprecated
 * @summary Single Collection
 */
const getCollectionV2 = (
    params?: GetCollectionV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionV2Response>(
      {url: `/collection/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed information about a single collection, including real-time stats.
 * @deprecated
 * @summary Single Collection
 */
const getCollectionV3 = (
    params?: GetCollectionV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionV3Response>(
      {url: `/collection/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Useful for getting multiple collections to show in a marketplace, or search for particular collections.
 * @deprecated
 * @summary List of collections
 */
const getCollectionsV1 = (
    params?: GetCollectionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV1Response>(
      {url: `/collections/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Useful for getting multiple collections to show in a marketplace, or search for particular collections.
 * @deprecated
 * @summary Get a filtered list of collections
 */
const getCollectionsV2 = (
    params?: GetCollectionsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV2Response>(
      {url: `/collections/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Useful for getting multiple collections to show in a marketplace, or search for particular collections.
 * @deprecated
 * @summary Get a filtered list of collections
 */
const getCollectionsV3 = (
    params?: GetCollectionsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV3Response>(
      {url: `/collections/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Useful for getting multiple collections to show in a marketplace, or search for particular collections.
 * @deprecated
 * @summary Collections
 */
const getCollectionsV4 = (
    params?: GetCollectionsV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV4Response>(
      {url: `/collections/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Use this API to explore a collection‚Äôs metadata and statistics (sales, volume, etc).
 * @deprecated
 * @summary Collections
 */
const getCollectionsV5 = (
    params?: GetCollectionsV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV5Response>(
      {url: `/collections/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Use this API to explore a collection's metadata and statistics (sales, volume, etc).
 * @deprecated
 * @summary Collections
 */
const getCollectionsV6 = (
    params?: GetCollectionsV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV6Response>(
      {url: `/collections/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Use this API to explore a collection's metadata and statistics (sales, volume, etc).
 * @summary Collections
 */
const getCollectionsV7 = (
    params?: GetCollectionsV7Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsV7Response>(
      {url: `/collections/v7`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to check the status of cross posted listings and bids.

 Input your `crossPostingOrderId` into the `ids` param and submit for the status. 

 The `crossPostingOrderId` is returned in the `execute/bids` and `execute/asks` response as well as the `onProgess` callback for the SDK. 

 Note: ReservoirKit does not return a `crossPostingOrderId`.
 * @summary Check cross posting status
 */
const getCrosspostingordersV1 = (
    params?: GetCrosspostingordersV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCrossPostingOrdersV1Response>(
      {url: `/cross-posting-orders/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Access orders with various filters applied. If you need orders created by a single user, use the positions API instead.
 * @deprecated
 * @summary List of valid orders.
 */
const getOrdersV1 = (
    params?: GetOrdersV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersV1Response>(
      {url: `/orders/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Submit order batch
 */
const postOrdersV1 = (
    model430: BodyType<Model430>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/orders/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model430
    },
      options);
    }
  
/**
 * Access orders with various filters applied. If you need orders created by a single user, use the positions API instead.
 * @deprecated
 * @summary Submit order batch
 */
const getOrdersV2 = (
    params?: GetOrdersV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersV2Response>(
      {url: `/orders/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute.
 * @summary Owners
 */
const getOwnersV1 = (
    params?: GetOwnersV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOwnersV1Response>(
      {url: `/owners/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get owners with various filters applied, and a summary of their ownership. Useful for exploring top owners in a collection or attribute.
 * @summary Owners
 */
const getOwnersV2 = (
    params?: GetOwnersV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOwnersV2Response>(
      {url: `/owners/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token.
 * @deprecated
 * @summary Historical sales
 */
const getSalesV1 = (
    params?: GetSalesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV1Response>(
      {url: `/sales/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token.
 * @deprecated
 * @summary Historical sales
 */
const getSalesV2 = (
    params?: GetSalesV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV2Response>(
      {url: `/sales/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token. Note: this API is returns rich metadata, and has advanced filters, so is only designed for small amounts of recent sales. If you want access to sales in bulk, use the `Aggregator > Bulk Sales` API.
 * @deprecated
 * @summary Historical sales
 */
const getSalesV3 = (
    params?: GetSalesV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV3Response>(
      {url: `/sales/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token.
 * @deprecated
 * @summary Sales
 */
const getSalesV4 = (
    params?: GetSalesV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV4Response>(
      {url: `/sales/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20.
 * @deprecated
 * @summary Sales
 */
const getSalesV5 = (
    params?: GetSalesV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV4Response>(
      {url: `/sales/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent sales for a contract or token. Paid mints are returned in this `sales` endpoint, free mints can be found in the `/activities/` endpoints. Array of contracts max limit is 20.
 * @summary Sales
 */
const getSalesV6 = (
    params?: GetSalesV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesV4Response>(
      {url: `/sales/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API returns a list of sources
 * @summary Sources List
 */
const getSourcesV1 = (
    params?: GetSourcesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSourcesV1Response>(
      {url: `/sources/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate stats for a particular set (collection, attribute or single token)
 * @deprecated
 * @summary Stats
 */
const getStatsV1 = (
    params?: GetStatsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetStatsV1Response>(
      {url: `/stats/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate stats for a particular set (collection, attribute or single token)
 * @summary Stats
 */
const getStatsV2 = (
    params?: GetStatsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetStatsV2Response>(
      {url: `/stats/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API
 * @deprecated
 * @summary List of tokens
 */
const getTokensV1 = (
    params?: GetTokensV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV1Response>(
      {url: `/tokens/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API
 * @deprecated
 * @summary List of tokens, with basic details, optimized for speed
 */
const getTokensV2 = (
    params?: GetTokensV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV2Response>(
      {url: `/tokens/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the `tokens/details` API
 * @deprecated
 * @summary List of tokens, with basic details, optimized for speed
 */
const getTokensV3 = (
    params?: GetTokensV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV3Response>(
      {url: `/tokens/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for quickly fetching a list of tokens in a collection, sorted by price, with only the most important information returned. If you need more metadata, use the tokens/details API
 * @deprecated
 * @summary Tokens
 */
const getTokensV4 = (
    params?: GetTokensV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV4Response>(
      {url: `/tokens/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata.
 * @summary Tokens
 */
const getTokensV5 = (
    params?: GetTokensV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV5Response>(
      {url: `/tokens/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata.
 * @summary Tokens
 */
const getTokensV6 = (
    params?: GetTokensV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV6Response>(
      {url: `/tokens/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata.
 * @deprecated
 * @summary Tokens
 */
const getTokensV7 = (
    params?: GetTokensV7Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensV7Response>(
      {url: `/tokens/v7`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent transfers for a contract or token.
 * @summary Historical token transfers
 */
const getTransfersV2 = (
    params?: GetTransfersV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransfersV2Response>(
      {url: `/transfers/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent transfers for a contract or token.
 * @deprecated
 * @summary Historical token transfers
 */
const getTransfersV3 = (
    params?: GetTransfersV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransfersV3Response>(
      {url: `/transfers/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get recent transfers for a contract or token.
 * @summary Historical token transfers
 */
const getTransfersV4 = (
    params?: GetTransfersV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransfersV3Response>(
      {url: `/transfers/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Get the associated info for the given API key
 */
const getAdminGetapikeyKey = (
    key: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetApiKeyRateLimitsResponse>(
      {url: `/admin/get-api-key/${key}`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Get metadata for a token or collection
 */
const getAdminProvidermetadataType = (
    type: 'token' | 'collection',
    params: GetAdminProvidermetadataTypeParams,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/provider-metadata/${type}`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get the rate limits for the given API key. Note: API keys are not universal across all available chains; please make a different key for every chain.
 * @summary Get rate limits for the given API key
 */
const getApikeysKeyRatelimits = (
    key: string,
 options?: SecondParameter<typeof client>,) => {
      return client<Model97>(
      {url: `/api-keys/${key}/rate-limits`, method: 'get'
    },
      options);
    }
  
/**
 * Get chain mint and sales stats for 1 and 7 days
 * @summary Chain Stats
 */
const getChainStatsV1 = (
    
 options?: SecondParameter<typeof client>,) => {
      return client<GetChainStatsV5Response>(
      {url: `/chain/stats/v1`, method: 'get'
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection
 * @summary Collection activity
 */
const getCollectionsActivityV4 = (
    params?: GetCollectionsActivityV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV4Response>(
      {url: `/collections/activity/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection
 * @summary Collection activity
 */
const getCollectionsActivityV5 = (
    params?: GetCollectionsActivityV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV5Response>(
      {url: `/collections/activity/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.
 * @summary Collection activity
 */
const getCollectionsActivityV6 = (
    params?: GetCollectionsActivityV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV6Response>(
      {url: `/collections/activity/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get date, volume, rank and sales count for each collection
 * @summary Daily collection volume
 */
const getCollectionsDailyvolumesV1 = (
    params: GetCollectionsDailyvolumesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetDailyVolumesV1Response>(
      {url: `/collections/daily-volumes/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get top selling and minting collections
 * @deprecated
 * @summary Top Selling Collections
 */
const getCollectionsTopsellingV1 = (
    params?: GetCollectionsTopsellingV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTopSellingCollectionsV1Response>(
      {url: `/collections/top-selling/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get top selling and minting collections
 * @deprecated
 * @summary Top selling collections
 */
const getCollectionsTopsellingV2 = (
    params?: GetCollectionsTopsellingV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTopSellingCollectionsV2Response>(
      {url: `/collections/top-selling/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get top selling and minting collections
 * @summary Top Selling Collections
 */
const getCollectionsTrendingV1 = (
    params?: GetCollectionsTrendingV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTrendingCollectionsV1Response>(
      {url: `/collections/trending/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get top trending mints
 * @summary Top Trending Mints
 */
const getCollectionsTrendingmintsV1 = (
    params?: GetCollectionsTrendingmintsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTrendingMintsV1Response>(
      {url: `/collections/trending-mints/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed information about a single collection, including real-time stats.
 * @deprecated
 * @summary Single collection
 */
const getCollectionsCollectionorslugV1 = (
    collectionOrSlug: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionDeprecatedV1Response>(
      {url: `/collections/${collectionOrSlug}/v1`, method: 'get'
    },
      options);
    }
  
/**
 * Convert an amount in one currency to another
 * @deprecated
 * @summary Currency Conversions
 */
const getCurrenciesConversionV1 = (
    params?: GetCurrenciesConversionV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCurrencyConversionV1Response>(
      {url: `/currencies/conversion/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get updates any time an asks status changes
 * @deprecated
 * @summary Asks status changes
 */
const getEventsAsksV2 = (
    params?: GetEventsAsksV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAsksEventsV2Response>(
      {url: `/events/asks/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time an ask status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was canceled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Note: Private listings (asks) will not appear in the results.
 * @summary Asks status changes
 */
const getEventsAsksV3 = (
    params?: GetEventsAsksV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAsksEventsV3Response>(
      {url: `/events/asks/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get updates any time a bid status changes
 * @deprecated
 * @summary Bid status changes
 */
const getEventsBidsV1 = (
    params?: GetEventsBidsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetBidEventsV1Response>(
      {url: `/events/bids/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get updates any time a bid status changes
 * @deprecated
 * @summary Bid status changes
 */
const getEventsBidsV2 = (
    params?: GetEventsBidsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetBidEventsV2Response>(
      {url: `/events/bids/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time a bid status changes, an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new offer at a lower price

- `expiry` > the previous best offer expired

- `sale` > the previous best offer was filled

- `cancel` > the previous best offer was canceled

- `balance-change` > the best offer was invalidated due to no longer owning the NFT

- `approval-change` > the best offer was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.
 * @summary Bid status changes
 */
const getEventsBidsV3 = (
    params?: GetEventsBidsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetBidEventsV3Response>(
      {url: `/events/bids/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get updates any time an order status changes
 * @deprecated
 * @summary Order status changes
 */
const getEventsOrdersV1 = (
    params?: GetEventsOrdersV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrderEventsV1Response>(
      {url: `/events/orders/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Cancel an existing order on any marketplace
 * @deprecated
 * @summary Cancel order
 */
const getExecuteCancelV2 = (
    params: GetExecuteCancelV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteCancelV2Response>(
      {url: `/execute/cancel/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for.
 * @summary User bid liquidity rankings
 */
const getLiquidityUsersV1 = (
    params?: GetLiquidityUsersV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUsersLiquidityV1Response>(
      {url: `/liquidity/users/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API calculates the total liquidity created by users, based on the number of tokens they are top bidder for.
 * @summary User bid liquidity rankings
 */
const getLiquidityUsersV2 = (
    params: GetLiquidityUsersV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUsersLiquidityV1Response>(
      {url: `/liquidity/users/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Bulk historical orders
 */
const getOrdersAllV1 = (
    params?: GetOrdersAllV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAllV1Response>(
      {url: `/orders/all/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Bulk historical orders
 */
const getOrdersAllV2 = (
    params?: GetOrdersAllV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAllV2Response>(
      {url: `/orders/all/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Get a list of asks (listings), filtered by token, collection or maker
 */
const getOrdersAsksV1 = (
    params?: GetOrdersAsksV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAsksV1Response>(
      {url: `/orders/asks/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Asks (listings)
 */
const getOrdersAsksV2 = (
    params?: GetOrdersAsksV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAsksV1Response>(
      {url: `/orders/asks/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @summary Asks (listings)
 */
const getOrdersAsksV3 = (
    params?: GetOrdersAsksV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAsksV3Response>(
      {url: `/orders/asks/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.

 Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Asks (listings)
 */
const getOrdersAsksV4 = (
    params?: GetOrdersAsksV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAsksV4Response>(
      {url: `/orders/asks/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of asks (listings), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.

 To get all orders unflitered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc.

 Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Asks (listings)
 */
const getOrdersAsksV5 = (
    params?: GetOrdersAsksV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersAsksV4Response>(
      {url: `/orders/asks/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Get a list of bids (offers), filtered by token, collection or maker
 */
const getOrdersBidsV1 = (
    params?: GetOrdersBidsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV1Response>(
      {url: `/orders/bids/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @deprecated
 * @summary Bids (offers)
 */
const getOrdersBidsV2 = (
    params?: GetOrdersBidsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV1Response>(
      {url: `/orders/bids/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @summary Bids (offers)
 */
const getOrdersBidsV3 = (
    params?: GetOrdersBidsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV3Response>(
      {url: `/orders/bids/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing
 * @summary Bids (offers)
 */
const getOrdersBidsV4 = (
    params?: GetOrdersBidsV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV4Response>(
      {url: `/orders/bids/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.

 There are a different kind of bids than can be returned:

- Inputting a 'contract' will return token and attribute bids.

- Inputting a 'collection-id' will return collection wide bids./n/n Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Bids (offers)
 */
const getOrdersBidsV5 = (
    params?: GetOrdersBidsV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV5Response>(
      {url: `/orders/bids/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of bids (offers), filtered by token, collection or maker. This API is designed for efficiently ingesting large volumes of orders, for external processing.

 There are a different kind of bids than can be returned:

- To get all orders unfiltered, select `sortBy` to `updatedAt`. No need to pass any other param. This will return any orders for any collections, token, attribute, etc. 

- Inputting a 'contract' will return token and attribute bids.

- Inputting a 'collection-id' will return collection wide bids.

- Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Bids (offers)
 */
const getOrdersBidsV6 = (
    params?: GetOrdersBidsV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersBidsV5Response>(
      {url: `/orders/bids/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get the depth of a token or collection.
 * @summary Orders depth
 */
const getOrdersDepthV1 = (
    params: GetOrdersDepthV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOrdersDepthV1Response>(
      {url: `/orders/depth/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Order status
 */
const getOrdersExecutedV1 = (
    params: GetOrdersExecutedV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/orders/executed/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to find top common collections from an array of owners.
 * @summary Common Collections
 */
const getOwnersCommoncollectionsV1 = (
    params: GetOwnersCommoncollectionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCommonCollectionsOwnersV1Response>(
      {url: `/owners/common-collections/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get total owners count for a specific token. Useful for 1155 tokens, where you want to know the exact amount of owners.
 * @summary Owners Count
 */
const getOwnersCountV1 = (
    params?: GetOwnersCountV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetOwnerCountV1Response>(
      {url: `/owners/count/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Find which addresses own the most of a group of collections.
 * @summary Owners intersection
 */
const getOwnersCrosscollectionsV1 = (
    params: GetOwnersCrosscollectionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCrossCollectionsOwnersV1Response>(
      {url: `/owners/cross-collections/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Redirect response to the given source logo
 */
const getRedirectLogoV1 = (
    params: GetRedirectLogoV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/logo/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Redirect response to the given source token page
 */
const getRedirectTokenV1 = (
    params: GetRedirectTokenV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/token/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Sales` endpoint
 * @deprecated
 * @summary Bulk historical sales
 */
const getSalesBulkV1 = (
    params?: GetSalesBulkV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSalesBulkV1Response>(
      {url: `/sales/bulk/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.
 * @summary Search activity
 */
const getSearchActivitiesV1 = (
    params?: GetSearchActivitiesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSearchActivitiesV1Response>(
      {url: `/search/activities/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Search collections
 */
const getSearchCollectionsV1 = (
    params?: GetSearchCollectionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSearchCollectionsV1Response>(
      {url: `/search/collections/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Search collections
 */
const getSearchCollectionsV2 = (
    params?: GetSearchCollectionsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetSearchCollectionsV2Response>(
      {url: `/search/collections/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for bulk access to asks (listings) for syncing a remote database. Thus it offers minimal filters/metadata.
 * @summary Sync Asks (listings)
 */
const getSyncAsksV1 = (
    params?: GetSyncAsksV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<SyncOrdersAsksV1Response>(
      {url: `/sync/asks/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get the latest price event per token in a collection, so that you can listen to future events and keep track of prices
 * @summary Token Events Bootstrap
 */
const getTokensBootstrapV1 = (
    params?: GetTokensBootstrapV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensBootstrapV1Response>(
      {url: `/tokens/bootstrap/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.
 * @deprecated
 * @summary Get one or more tokens with full details
 */
const getTokensDetailsV2 = (
    params?: GetTokensDetailsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensDetailsV2Response>(
      {url: `/tokens/details/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.
 * @deprecated
 * @summary Get one or more tokens with full details
 */
const getTokensDetailsV3 = (
    params?: GetTokensDetailsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensDetailsV3Response>(
      {url: `/tokens/details/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a list of tokens with full metadata. This is useful for showing a single token page, or scenarios that require more metadata. If you don't need this metadata, you should use the <a href='#/tokens/getTokensV1'>tokens</a> API, which is much faster.
 * @deprecated
 * @summary Tokens (detailed response)
 */
const getTokensDetailsV4 = (
    params?: GetTokensDetailsV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensDetailsV4Response>(
      {url: `/tokens/details/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API will return the best price of every token in a collection that is currently on sale. Note: Prices are returned in the native currency of the network.
 * @summary Token Prices
 */
const getTokensFloorV1 = (
    params?: GetTokensFloorV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensFloorV1Response>(
      {url: `/tokens/floor/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API is optimized for quickly fetching a list of tokens ids in by collection, contract, token set id. 
 * @summary Token IDs
 */
const getTokensIdsV1 = (
    params?: GetTokensIdsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensIdsV1Response>(
      {url: `/tokens/ids/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint
 * @deprecated
 * @summary Bulk historical transfers
 */
const getTransfersBulkV1 = (
    params?: GetTransfersBulkV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransfersBulkV1Response>(
      {url: `/transfers/bulk/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Note: this API is optimized for bulk access, and offers minimal filters/metadata. If you need more flexibility, try the `NFT API > Transfers` endpoint
 * @summary Bulk historical transfers
 */
const getTransfersBulkV2 = (
    params?: GetTransfersBulkV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransfersBulkV1Response>(
      {url: `/transfers/bulk/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user
 * @summary Users activity
 */
const getUsersActivityV2 = (
    params: GetUsersActivityV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV2Response>(
      {url: `/users/activity/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user
 * @summary Users activity
 */
const getUsersActivityV3 = (
    params: GetUsersActivityV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV3Response>(
      {url: `/users/activity/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user
 * @summary Users activity
 */
const getUsersActivityV4 = (
    params: GetUsersActivityV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV4Response>(
      {url: `/users/activity/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user
 * @summary Users activity
 */
const getUsersActivityV5 = (
    params: GetUsersActivityV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV5Response>(
      {url: `/users/activity/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.
 * @summary Users activity
 */
const getUsersActivityV6 = (
    params: GetUsersActivityV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV6Response>(
      {url: `/users/activity/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API returns recommended marketplace configurations given a collection id
 * @summary Marketplace configurations by collection
 */
const getCollectionsCollectionMarketplaceconfigurationsV1 = (
    collection: string,
    params?: GetCollectionsCollectionMarketplaceconfigurationsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<Model238>(
      {url: `/collections/${collection}/marketplace-configurations/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to show what the distribution of owners in a collection looks like.
 * @summary Owners Collection Distribution
 */
const getCollectionsCollectionOwnersdistributionV1 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionOwnersDistributionV1Response>(
      {url: `/collections/${collection}/owners-distribution/v1`, method: 'get'
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection
 * @summary Collection activity
 */
const getCollectionsCollectionActivityV3 = (
    collection: string,
    params?: GetCollectionsCollectionActivityV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV3Response>(
      {url: `/collections/${collection}/activity/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection
 * @summary Collection activity
 */
const getCollectionsCollectionActivityV1 = (
    collection: string,
    params?: GetCollectionsCollectionActivityV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV2Response>(
      {url: `/collections/${collection}/activity/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a collection
 * @summary Collection activity
 */
const getCollectionsCollectionActivityV2 = (
    collection: string,
    params?: GetCollectionsCollectionActivityV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV2Response>(
      {url: `/collections/${collection}/activity/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Get detailed aggregate about attributes in a collection, e.g. trait floors
 */
const getCollectionsCollectionAttributesV1 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionAttributesV1Response>(
      {url: `/collections/${collection}/attributes/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * When users are placing collection or trait bids, this API can be used to show them where the bid is in the context of other bids, and how many tokens it will be the top bid for.
 * @deprecated
 * @summary Bid distribution
 */
const getCollectionsCollectionTopbidsV1 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionTopBidsV1Response>(
      {url: `/collections/${collection}/top-bids/v1`, method: 'get'
    },
      options);
    }
  
/**
 * The ReservoirKit `ListModal` client utilizes this API to identify the marketplace(s) it can list on.
 * @summary Supported marketplaces by collection
 */
const getCollectionsCollectionSupportedmarketplacesV1 = (
    collection: string,
    params?: GetCollectionsCollectionSupportedmarketplacesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<Model251>(
      {url: `/collections/${collection}/supported-marketplaces/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to show what the distribution of owners in a collections set id looks like.
 * @summary Owners Collection Set Distribution
 */
const getCollectionssetsCollectionssetidOwnersdistributionV1 = (
    collectionsSetId: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsSetOwnersDistributionV1Response>(
      {url: `/collections-sets/${collectionsSetId}/owners-distribution/v1`, method: 'get'
    },
      options);
    }
  
/**
 * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was cancelled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Collection floor changes
 */
const getEventsCollectionsFlooraskV1 = (
    params?: GetEventsCollectionsFlooraskV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsFloorAskV1Response>(
      {url: `/events/collections/floor-ask/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the floor price of a collection changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was cancelled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Collection floor changes
 */
const getEventsCollectionsFlooraskV2 = (
    params?: GetEventsCollectionsFlooraskV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsFloorAskV2Response>(
      {url: `/events/collections/floor-ask/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.
 * @summary Collection top bid changes
 */
const getEventsCollectionsTopbidV1 = (
    params?: GetEventsCollectionsTopbidV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsTopbidV1Response>(
      {url: `/events/collections/top-bid/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the top offer of a collection changes (i.e. the 'top bid'), an event is generated. This API is designed to be polled at high frequency.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new bid at a higher price

- `expiry` > the previous top bid expired

- `sale` > the previous top bid was accepted

- `cancel` > the previous top bid was cancelled

- `balance-change` > the top bid was invalidated due NFT no longer available

- `approval-change` > the top bid was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the top bid changes. So if a new order or sale happens without changing the top bid, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Collection top bid changes
 */
const getEventsCollectionsTopbidV2 = (
    params?: GetEventsCollectionsTopbidV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionsTopbidV2Response>(
      {url: `/events/collections/top-bid/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was cancelled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Token price changes
 */
const getEventsTokensFlooraskV2 = (
    params?: GetEventsTokensFlooraskV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensFloorAskV2Response>(
      {url: `/events/tokens/floor-ask/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was cancelled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Token price changes
 */
const getEventsTokensFlooraskV3 = (
    params?: GetEventsTokensFlooraskV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensFloorAskV3Response>(
      {url: `/events/tokens/floor-ask/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Every time the best price of a token changes (i.e. the 'floor ask'), an event is generated. This API is designed to be polled at high frequency, in order to keep an external system in sync with accurate prices for any token.

There are multiple event types, which describe what caused the change in price:

- `new-order` > new listing at a lower price

- `expiry` > the previous best listing expired

- `sale` > the previous best listing was filled

- `cancel` > the previous best listing was cancelled

- `balance-change` > the best listing was invalidated due to no longer owning the NFT

- `approval-change` > the best listing was invalidated due to revoked approval

- `revalidation` > manual revalidation of orders (e.g. after a bug fixed)

- `reprice` > price update for dynamic orders (e.g. dutch auctions)

- `bootstrap` > initial loading of data, so that all tokens have a price associated

Some considerations to keep in mind

- Selling a partial quantity of available 1155 tokens in a listing will generate a `sale` and will have a new quantity.

- Due to the complex nature of monitoring off-chain liquidity across multiple marketplaces, including dealing with block re-orgs, events should be considered 'relative' to the perspective of the indexer, ie _when they were discovered_, rather than _when they happened_. A more deterministic historical record of price changes is in development, but in the meantime, this method is sufficent for keeping an external system in sync with the best available prices.

- Events are only generated if the best price changes. So if a new order or sale happens without changing the best price, no event is generated. This is more common with 1155 tokens, which have multiple owners and more depth. For this reason, if you need sales data, use the Sales API.
 * @summary Token price changes
 */
const getEventsTokensFlooraskV4 = (
    params?: GetEventsTokensFlooraskV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokensFloorAskV4Response>(
      {url: `/events/tokens/floor-ask/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's bid-ask midpoint (spot or twap). This is approximation of the colletion price. The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @summary Collection bid-ask midpoint
 */
const getOracleCollectionsBidaskmidpointV1 = (
    params?: GetOracleCollectionsBidaskmidpointV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionBidAskMidpointOracleV1Response>(
      {url: `/oracle/collections/bid-ask-midpoint/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0x32dA57E736E05f75aa4FaE2E9Be60FD904492726.
 * @deprecated
 * @summary Collection floor
 */
const getOracleCollectionsFlooraskV4 = (
    params?: GetOracleCollectionsFlooraskV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionFloorAskOracleV4Response>(
      {url: `/oracle/collections/floor-ask/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @deprecated
 * @summary Collection floor
 */
const getOracleCollectionsFlooraskV5 = (
    params?: GetOracleCollectionsFlooraskV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionFloorAskOracleV4Response>(
      {url: `/oracle/collections/floor-ask/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's floor price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @summary Collection floor
 */
const getOracleCollectionsFlooraskV6 = (
    params?: GetOracleCollectionsFlooraskV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionFloorAskOracleV6Response>(
      {url: `/oracle/collections/floor-ask/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @deprecated
 * @summary Collection top bid oracle
 */
const getOracleCollectionsTopbidV2 = (
    params?: GetOracleCollectionsTopbidV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionTopBidOracleV2Response>(
      {url: `/oracle/collections/top-bid/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of any collection's top bid price (spot or twap). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @summary Collection top bid oracle
 */
const getOracleCollectionsTopbidV3 = (
    params?: GetOracleCollectionsTopbidV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionBidAskMidpointOracleV1Response>(
      {url: `/oracle/collections/top-bid/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @deprecated
 * @summary Token status oracle
 */
const getOracleTokensStatusV2 = (
    params: GetOracleTokensStatusV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokenStatusOracleV2Response>(
      {url: `/oracle/tokens/status/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a signed message of a token's details (flagged status and last transfer time). The oracle's address is 0xAeB1D03929bF87F69888f381e73FBf75753d75AF. The address is the same for all chains.
 * @summary Token status oracle
 */
const getOracleTokensStatusV3 = (
    params: GetOracleTokensStatusV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokenStatusOracleV3Response>(
      {url: `/oracle/tokens/status/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API return the recent flagged/un-flagged tokens across all collections sorted by change time
 * @summary Flagged Tokens
 */
const getTokensFlagChangesV1 = (
    params?: GetTokensFlagChangesV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetFlaggedTokensV1Response>(
      {url: `/tokens/flag/changes/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a token activity including sales, asks, transfers, mints, bids, cancelled bids, and cancelled asks types.
 * @summary Token activity
 */
const getTokensTokenActivityV5 = (
    token: string,
    params?: GetTokensTokenActivityV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokenActivityV5Response>(
      {url: `/tokens/${token}/activity/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a token
 * @summary Token activity
 */
const getTokensTokenActivityV3 = (
    token: string,
    params?: GetTokensTokenActivityV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV4Response>(
      {url: `/tokens/${token}/activity/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a token
 * @summary Token activity
 */
const getTokensTokenActivityV1 = (
    token: string,
    params?: GetTokensTokenActivityV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV2Response>(
      {url: `/tokens/${token}/activity/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a token
 * @summary Token activity
 */
const getTokensTokenActivityV2 = (
    token: string,
    params?: GetTokensTokenActivityV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionActivityV2Response>(
      {url: `/tokens/${token}/activity/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a token
 * @summary Token activity
 */
const getTokensTokenActivityV4 = (
    token: string,
    params?: GetTokensTokenActivityV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTokenActivityV4Response>(
      {url: `/tokens/${token}/activity/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get a boolean response on whether a particular transaction was synced or not.
 * @summary Transaction status
 */
const getTransactionsTxhashSyncedV1 = (
    txHash: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetTransactionSyncedV1Response>(
      {url: `/transactions/${txHash}/synced/v1`, method: 'get'
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User Tokens
 */
const getUsersUserTokensV6 = (
    user: string,
    params?: GetUsersUserTokensV6Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV6Response>(
      {url: `/users/${user}/tokens/v6`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User Tokens
 */
const getUsersUserTokensV4 = (
    user: string,
    params?: GetUsersUserTokensV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV4Response>(
      {url: `/users/${user}/tokens/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User tokens
 */
const getUsersUserTokensV2 = (
    user: string,
    params?: GetUsersUserTokensV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV2Response>(
      {url: `/users/${user}/tokens/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate user liquidity, grouped by collection. Useful for showing a summary of liquidity being provided (orders made).
 * @deprecated
 * @summary Get a summary of a users bids and asks
 */
const getUsersUserPositionsV1 = (
    user: string,
    params: GetUsersUserPositionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserPositionsV1Response>(
      {url: `/users/${user}/positions/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.
 * @summary User collections
 */
const getUsersUserCollectionsV3 = (
    user: string,
    params?: GetUsersUserCollectionsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserCollectionsV3Response>(
      {url: `/users/${user}/collections/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.
 * @deprecated
 * @summary Get aggregate stats for a user, grouped by collection
 */
const getUsersUserCollectionsV1 = (
    user: string,
    params?: GetUsersUserCollectionsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserCollectionsV1Response>(
      {url: `/users/${user}/collections/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * This API can be used to build a feed for a user
 * @summary User activity
 */
const getUsersUserActivityV1 = (
    user: string,
    params?: GetUsersUserActivityV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserActivityV1Response>(
      {url: `/users/${user}/activity/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get aggregate stats for a user, grouped by collection. Useful for showing total portfolio information.
 * @summary User collections
 */
const getUsersUserCollectionsV2 = (
    user: string,
    params?: GetUsersUserCollectionsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserCollectionsV2Response>(
      {url: `/users/${user}/collections/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @deprecated
 * @summary User tokens
 */
const getUsersUserTokensV1 = (
    user: string,
    params?: GetUsersUserTokensV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV1Response>(
      {url: `/users/${user}/tokens/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User Tokens
 */
const getUsersUserTokensV3 = (
    user: string,
    params?: GetUsersUserTokensV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV3Response>(
      {url: `/users/${user}/tokens/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User Tokens
 */
const getUsersUserTokensV5 = (
    user: string,
    params?: GetUsersUserTokensV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV5Response>(
      {url: `/users/${user}/tokens/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get tokens held by a user, along with ownership information such as associated orders and date acquired.
 * @summary User Tokens
 */
const getUsersUserTokensV7 = (
    user: string,
    params?: GetUsersUserTokensV7Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTokensV7Response>(
      {url: `/users/${user}/tokens/v7`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAskPrices` by default.

- `floorAskPrices` will not be returned on attributes with more than 10k tokens.
 * @summary Explore attributes
 */
const getCollectionsCollectionAttributesExploreV5 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesExploreV5Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesExploreV5Response>(
      {url: `/collections/${collection}/attributes/explore/v5`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed aggregate about attributes in a collection, attribute floors
 * @deprecated
 * @summary Explore attributes
 */
const getCollectionsCollectionAttributesExploreV3 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesExploreV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesExploreV3Response>(
      {url: `/collections/${collection}/attributes/explore/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Get detailed aggregate about attributes in a collection, e.g. trait floors
 */
const getCollectionsCollectionAttributesExploreV1 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesExploreV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetCollectionAttributesV1Response>(
      {url: `/collections/${collection}/attributes/explore/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary All attributes + token ids
 */
const getCollectionsCollectionAttributesStaticV1 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesStaticV1Response>(
      {url: `/collections/${collection}/attributes/static/v1`, method: 'get'
    },
      options);
    }
  
/**
 * @summary All attributes
 */
const getCollectionsCollectionAttributesAllV3 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesAllV3Response>(
      {url: `/collections/${collection}/attributes/all/v3`, method: 'get'
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Get all attributes in a collection
 */
const getCollectionsCollectionAttributesAllV1 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesV1Response>(
      {url: `/collections/${collection}/attributes/all/v1`, method: 'get'
    },
      options);
    }
  
/**
 * @summary All attributes
 */
const getCollectionsCollectionAttributesAllV2 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesAllV2Response>(
      {url: `/collections/${collection}/attributes/all/v2`, method: 'get'
    },
      options);
    }
  
/**
 * Use this API to see all possible attributes within a collection.

- `floorAskPrice` for all attributes might not be returned on collections with more than 10k tokens. 

- Attributes are case sensitive. 

- Attributes will return a maximum of 500 values.
 * @summary All attributes
 */
const getCollectionsCollectionAttributesAllV4 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesAllV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesAllV4Response>(
      {url: `/collections/${collection}/attributes/all/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Get detailed aggregate about attributes in a collection, attribute floors
 * @summary Explore attributes
 */
const getCollectionsCollectionAttributesExploreV2 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesExploreV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesExploreV2Response>(
      {url: `/collections/${collection}/attributes/explore/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Use this API to see stats on a specific attribute within a collection. This endpoint will return `tokenCount`, `onSaleCount`, `sampleImages`, and `floorAsk` by default. 
 * @summary Explore attributes
 */
const getCollectionsCollectionAttributesExploreV4 = (
    collection: string,
    params?: GetCollectionsCollectionAttributesExploreV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetAttributesExploreV4Response>(
      {url: `/collections/${collection}/attributes/explore/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Return the top bids for the given user tokens. Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary User Top Bids
 */
const getOrdersUsersUserTopbidsV4 = (
    user: string,
    params?: GetOrdersUsersUserTopbidsV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTopBidsV4Response>(
      {url: `/orders/users/${user}/top-bids/v4`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Return the top bids for the given user tokens
 * @summary User Top Bids
 */
const getOrdersUsersUserTopbidsV2 = (
    user: string,
    params?: GetOrdersUsersUserTopbidsV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTopBidsV2Response>(
      {url: `/orders/users/${user}/top-bids/v2`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Return the top bids for the given user tokens
 * @summary User Top Bids
 */
const getOrdersUsersUserTopbidsV1 = (
    user: string,
    params?: GetOrdersUsersUserTopbidsV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTopBidsV1Response>(
      {url: `/orders/users/${user}/top-bids/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * Return the top bids for the given user tokens
 * @summary User Top Bids
 */
const getOrdersUsersUserTopbidsV3 = (
    user: string,
    params?: GetOrdersUsersUserTopbidsV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<GetUserTopBidsV3Response>(
      {url: `/orders/users/${user}/top-bids/v3`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Redirect to the given collection image
 */
const getRedirectCollectionsCollectionImageV1 = (
    collection: string,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/collections/${collection}/image/v1`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Redirect response to the given currency address icon
 */
const getRedirectCurrencyAddressIconV1 = (
    address: string,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/currency/${address}/icon/v1`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Redirect response to the given source logo
 */
const getRedirectSourcesSourceLogoV2 = (
    source: string,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/sources/${source}/logo/v2`, method: 'get'
    },
      options);
    }
  
/**
 * @summary Redirect response to the given token image
 */
const getRedirectTokensTokenImageV1 = (
    token: string,
    params?: GetRedirectTokensTokenImageV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/tokens/${token}/image/v1`, method: 'get',
        params
    },
      options);
    }
  
/**
 * @summary Redirect response to the given source token page
 */
const getRedirectSourcesSourceTokensTokenLinkV2 = (
    source: string,
    token: string,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/redirect/sources/${source}/tokens/${token}/link/v2`, method: 'get'
    },
      options);
    }
  
/**
 * This API requires an administrator API for execution. Explore and try the `/collections-sets/v1` or `/contracts-sets/v1` endpoints. Please contact technical support with more questions.
 * @summary Set a community for a specific collection
 */
const putCollectionsCollectionCommunityV1 = (
    collection: string,
    model381: BodyType<Model381>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/${collection}/community/v1`, method: 'put',
      headers: {'Content-Type': 'application/json', },
      data: model381
    },
      options);
    }
  
/**
 * The API key can be used in every route, by setting it as a request header **x-api-key**.

<a href='https://docs.reservoir.tools/reference/getting-started'>Learn more</a> about API Keys and Rate Limiting
 * @summary Generate API Key
 */
const postApikeys = (
    postApikeysBody: BodyType<PostApikeysBody>,
 options?: SecondParameter<typeof client>,) => {const formUrlEncoded = new URLSearchParams();
formUrlEncoded.append('appName', postApikeysBody.appName)
formUrlEncoded.append('email', postApikeysBody.email)
formUrlEncoded.append('website', postApikeysBody.website)

      return client<GetNewApiKeyResponse>(
      {url: `/api-keys`, method: 'post',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  
/**
 * @summary Trigger calculation of the give collection tokens rarity
 */
const postAdminCalcrarity = (
    model382: BodyType<Model382>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/calc-rarity`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model382
    },
      options);
    }
  
/**
 * @summary Create rate limit
 */
const postAdminCreateratelimitrule = (
    model385: BodyType<Model385>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/create-rate-limit-rule`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model385
    },
      options);
    }
  
/**
 * @summary Delete the rate limit with the given ID
 */
const postAdminDeleteratelimitrule = (
    model386: BodyType<Model386>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/delete-rate-limit-rule`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model386
    },
      options);
    }
  
/**
 * @summary Trigger fixing any orphaned block.
 */
const postAdminFixblocks = (
    model387Body: BodyType<Model387Body>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/fix-blocks`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model387Body
    },
      options);
    }
  
/**
 * @summary Trigger fixing any cache inconsistencies for array of contracts.
 */
const postAdminFixcache = (
    model388: BodyType<Model388>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/fix-cache`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model388
    },
      options);
    }
  
/**
 * @summary Trigger fixing any order inconsistencies.
 */
const postAdminFixorders = (
    model389: BodyType<Model389>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/fix-orders`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model389
    },
      options);
    }
  
/**
 * @summary Trigger fixing any cache inconsistencies for specific token.
 */
const postAdminFixtokencache = (
    model390: BodyType<Model390>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/fix-token-cache`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model390
    },
      options);
    }
  
/**
 * @summary Trigger metadata indexing for a token's collection
 */
const postAdminIndexmetadata = (
    model391: BodyType<Model391>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/index-metadata`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model391
    },
      options);
    }
  
/**
 * @summary Pause rabbit queue
 */
const postAdminPauserabbitqueue = (
    model392: BodyType<Model392>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/pause-rabbit-queue`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model392
    },
      options);
    }
  
/**
 * @summary Refresh a collection's orders and metadata
 */
const postAdminRefreshcollection = (
    model393: BodyType<Model393>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/refresh-collection`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model393
    },
      options);
    }
  
/**
 * @summary Refresh a token's orders and metadata
 */
const postAdminRefreshtoken = (
    model394: BodyType<Model394>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/refresh-token`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model394
    },
      options);
    }
  
/**
 * @summary Resume rabbit queue
 */
const postAdminResumerabbitqueue = (
    model395: BodyType<Model395>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resume-rabbit-queue`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model395
    },
      options);
    }
  
/**
 * @summary Trigger fixing any floor events inconsistencies for any particular collection.
 */
const postAdminResyncfloorevents = (
    model396: BodyType<Model396>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resync-floor-events`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model396
    },
      options);
    }
  
/**
 * @summary Trigger the recalculation of nft balances for tokens transferred in any particular block range
 */
const postAdminResyncnftbalances = (
    model387Body: BodyType<Model387Body>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resync-nft-balances`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model387Body
    },
      options);
    }
  
/**
 * @summary Trigger the recalculation of sale royalties for any particular block range.
 */
const postAdminResyncsaleroyalties = (
    model398: BodyType<Model398>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resync-sale-royalties`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model398
    },
      options);
    }
  
/**
 * @summary Trigger re-syncing of specific source domain
 */
const postAdminResyncsource = (
    model399: BodyType<Model399>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resync-source`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model399
    },
      options);
    }
  
/**
 * @summary Trigger the recalculation of user in certain collection
 */
const postAdminResyncuserbalance = (
    model400: BodyType<Model400>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/resync-user-balance`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model400
    },
      options);
    }
  
/**
 * @summary Retry all the messages within the given dead letter rabbit queue
 */
const postAdminRetryrabbitqueue = (
    model401: BodyType<Model401>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/retry-rabbit-queue`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model401
    },
      options);
    }
  
/**
 * @summary Revalidate an existing order
 */
const postAdminRevalidateorder = (
    model402: BodyType<Model402>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/revalidate-order`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model402
    },
      options);
    }
  
/**
 * @summary Add a new router contract
 */
const postAdminRouters = (
    model404: BodyType<Model404>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/routers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model404
    },
      options);
    }
  
/**
 * @summary Set a community for a specific collection
 */
const postAdminSetcommunity = (
    model405: BodyType<Model405>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/set-community`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model405
    },
      options);
    }
  
/**
 * @summary Trigger a re-sync of daily volume calculations, volumes should only be calculated when fill_events have been fully synced
 */
const postAdminSyncdailyvolumes = (
    model406: BodyType<Model406>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/sync-daily-volumes`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model406
    },
      options);
    }
  
/**
 * @summary Trigger syncing of events.
 */
const postAdminSyncevents = (
    model408: BodyType<Model408>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/sync-events`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model408
    },
      options);
    }
  
/**
 * @summary Trigger bullmq job
 */
const postAdminTriggerjob = (
    model409: BodyType<Model409>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/trigger-job`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model409
    },
      options);
    }
  
/**
 * @summary Trigger rabbit job
 */
const postAdminTriggerrabbitjob = (
    model410: BodyType<Model410>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/trigger-rabbit-job`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model410
    },
      options);
    }
  
/**
 * @summary Update the given api key
 */
const postAdminUpdateapikey = (
    model411: BodyType<Model411>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/update-api-key`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model411
    },
      options);
    }
  
/**
 * @summary Increment the metadata version for a collection to bust the cache
 */
const postAdminUpdateimageversion = (
    model412: BodyType<Model412>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/update-image-version`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model412
    },
      options);
    }
  
/**
 * @summary Update the rate limit for the given ID
 */
const postAdminUpdateratelimitrule = (
    model413: BodyType<Model413>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/update-rate-limit-rule`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model413
    },
      options);
    }
  
/**
 * @summary Trigger re-syncing of specific source domain
 */
const postAdminUpdatesource = (
    model414: BodyType<Model414>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/admin/update-source`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model414
    },
      options);
    }
  
/**
 * Array of collections to gather in a set. Adding or removing a collection will change the response. You may use this set when `collectionSetId` is an available param. An example is below.

`"collections": "0xba30E5F9Bb24caa003E9f2f0497Ad287FDF95623", "0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D"`

`"collectionsSetId": "8daa732ebe5db23f267e58d52f1c9b1879279bcdf4f78b8fb563390e6946ea65"`
 * @summary Create collection set
 */
const postCollectionssetsV1 = (
    model416: BodyType<Model416>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostCreateCollectionsSetV1Response>(
      {url: `/collections-sets/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model416
    },
      options);
    }
  
/**
 * Array of contracts to gather in a set. Adding or removing a contract will change the response. You may use this set when contractSetId is an available param.
 * @summary Create contracts set
 */
const postContractssetsV1 = (
    model417: BodyType<Model417>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostCreateContractsSetV1Response>(
      {url: `/contracts-sets/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model417
    },
      options);
    }
  
/**
 * @summary Submit single order
 */
const postOrderV2 = (
    model419: BodyType<Model419>,
    params?: PostOrderV2Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PostOrderV2Response>(
      {url: `/order/v2`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model419,
        params
    },
      options);
    }
  
/**
 * @summary Submit signed order
 */
const postOrderV3 = (
    model421: BodyType<Model421>,
    params?: PostOrderV3Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PostOrderV2Response>(
      {url: `/order/v3`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model421,
        params
    },
      options);
    }
  
/**
 * @summary Submit signed orders
 */
const postOrderV4 = (
    model426: BodyType<Model426>,
    params?: PostOrderV4Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PostOrderV4Response>(
      {url: `/order/v4`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model426,
        params
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Submit multiple Seaport offers (compatible with OpenSea's API response)
 */
const postSeaportOffers = (
    model432: BodyType<Model432>,
 options?: SecondParameter<typeof client>,) => {
      return client<string>(
      {url: `/seaport/offers`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model432
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Create Token Set
 */
const postTokensetsV1 = (
    model433: BodyType<Model433>,
 options?: SecondParameter<typeof client>,) => {
      return client<Model254>(
      {url: `/token-sets/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model433
    },
      options);
    }
  
/**
 * Use this API to create a `tokenSetId` to call specific tokens from a collection. Adding or removing a tokenId will change the response. See an example below.

 Input of `0xd774557b647330c91bf44cfeab205095f7e6c367:1` and `0xd774557b647330c91bf44cfeab205095f7e6c367:2`

 Output of `list:0xd774557b647330c91bf44cfeab205095f7e6c367:0xb6fd98eeb7e08fc521f11511289afe4d8e873fd7a3fb76ab757fa47c23f596e9`

 Notes:

- Include `list:` when using this `tokenSetId` for it to work successfully.

- You cannot adjust tokens within a `tokenSetId`. Please create a new set.

- Use the `/tokens/ids` endpoint to get a list of tokens within a set.
 * @summary Create token set
 */
const postTokensetsV2 = (
    model435: BodyType<Model435>,
 options?: SecondParameter<typeof client>,) => {
      return client<Model254>(
      {url: `/token-sets/v2`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model435
    },
      options);
    }
  
/**
 * Get API usage metrics for the given API key
 * @summary Get API usage metrics for the given API key
 */
const postAdminApikeysMetrics = (
    postAdminApikeysMetricsBody: BodyType<PostAdminApikeysMetricsBody>,
 options?: SecondParameter<typeof client>,) => {const formUrlEncoded = new URLSearchParams();
postAdminApikeysMetricsBody.keys.forEach(value => formUrlEncoded.append('keys', value));
if(postAdminApikeysMetricsBody.granularity !== undefined) {
 formUrlEncoded.append('granularity', postAdminApikeysMetricsBody.granularity)
 }
if(postAdminApikeysMetricsBody.groupBy !== undefined) {
 formUrlEncoded.append('groupBy', postAdminApikeysMetricsBody.groupBy.toString())
 }
if(postAdminApikeysMetricsBody.startTime !== undefined) {
 formUrlEncoded.append('startTime', postAdminApikeysMetricsBody.startTime)
 }
if(postAdminApikeysMetricsBody.endTime !== undefined) {
 formUrlEncoded.append('endTime', postAdminApikeysMetricsBody.endTime)
 }

      return client<PostApiKeyMetricsResponse>(
      {url: `/admin/api-keys/metrics`, method: 'post',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded
    },
      options);
    }
  
/**
 * This API requires an allowed API key for execution. Please contact technical support with more questions.
 * @summary Disable or reenable metadata for a collection
 */
const postCollectionsDisablemetadataV1 = (
    model438: BodyType<Model438>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/disable-metadata/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model438
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Refresh Collection
 */
const postCollectionsRefreshV1 = (
    model439: BodyType<Model439>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/refresh/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model439
    },
      options);
    }
  
/**
 * Use this API to refresh a collection metadata. Only use this endpoint when you notice multiple tokens with incorrect metadata. Otherwise, refresh single token metadata. Collections with over 30,000 tokens require admin key override, so please contact technical support for assistance.

 Collection metadata is automatically updated at 23:30 UTC daily for:

- Top 500 Collection by 24hr Volume

- Collections Minted 1 Day Ago

- Collections Minted 7 Days Ago

 Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
 * @summary Refresh Collection
 */
const postCollectionsRefreshV2 = (
    model440: BodyType<Model440>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/refresh/v2`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model440
    },
      options);
    }
  
/**
 * This API can be used by allowed API keys to update the spam status of a collection.
 * @summary Update collections spam status
 */
const postCollectionsSpamstatusV1 = (
    model442: BodyType<Model442>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/spam-status/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model442
    },
      options);
    }
  
/**
 * @summary Attach a signature to an existing auth challenge
 */
const postExecuteAuthsignatureV1 = (
    model443: BodyType<Model443>,
    params: PostExecuteAuthsignatureV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PostAuthSignatureV1Response>(
      {url: `/execute/auth-signature/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model443,
        params
    },
      options);
    }
  
/**
 * Generate a bid and submit it to multiple marketplaces
 * @deprecated
 * @summary Create bid (offer)
 */
const postExecuteBidV4 = (
    model445: BodyType<Model445>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBidV4Response>(
      {url: `/execute/bid/v4`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model445
    },
      options);
    }
  
/**
 * Generate bids and submit them to multiple marketplaces.

 Notes:

- Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.

- We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
 * @summary Create bids (offers)
 */
const postExecuteBidV5 = (
    model451: BodyType<Model451>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBidV5Response>(
      {url: `/execute/bid/v5`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model451
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Buy tokens
 */
const postExecuteBuyV5 = (
    model459: BodyType<Model459>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBuyV5Response>(
      {url: `/execute/buy/v5`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model459
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Buy tokens
 */
const postExecuteBuyV6 = (
    model468: BodyType<Model468>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBuyV6Response>(
      {url: `/execute/buy/v6`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model468
    },
      options);
    }
  
/**
 * Use this API to fill listings. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Buy tokens (fill listings)
 */
const postExecuteBuyV7 = (
    model476: BodyType<Model476>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBuyV7Response>(
      {url: `/execute/buy/v7`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model476
    },
      options);
    }
  
/**
 * Cancel existing orders on any marketplace
 * @summary Cancel orders
 */
const postExecuteCancelV3 = (
    model489: BodyType<Model489>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteCancelV3Response>(
      {url: `/execute/cancel/v3`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model489
    },
      options);
    }
  
/**
 * This endpoint cancels Imtbl orders in their API, using the signature of the cancel request.
 * @summary Imtbl cancel orders
 */
const postExecuteCancelimtblV1 = (
    model496: BodyType<Model496>,
    params?: PostExecuteCancelimtblV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/execute/cancel-imtbl/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model496,
        params
    },
      options);
    }
  
/**
 * If your order was created using the Seaport Oracle to allow off chain & gasless cancellations, you can just use the Kit's cancel modals, SDK's `cancelOrder`, or `/execute/cancel/`. Those tools will automatically access this endpoint for an oracle cancellation without you directly calling this endpoint.
 * @summary Off-chain cancel orders
 */
const postExecuteCancelsignatureV1 = (
    model498: BodyType<Model498>,
    params?: PostExecuteCancelsignatureV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/execute/cancel-signature/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model498,
        params
    },
      options);
    }
  
/**
 * Generate a listing and submit it to multiple marketplaces
 * @deprecated
 * @summary Create ask (listing)
 */
const postExecuteListV4 = (
    model501: BodyType<Model501>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteListV4Response>(
      {url: `/execute/list/v4`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model501
    },
      options);
    }
  
/**
 * Generate listings and submit them to multiple marketplaces.

 Notes:

- Please use the `/cross-posting-orders/v1` to check the status on cross posted bids.

- We recommend using Reservoir SDK as it abstracts the process of iterating through steps, and returning callbacks that can be used to update your UI.
 * @summary Create asks (listings)
 */
const postExecuteListV5 = (
    model505: BodyType<Model505>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteListV5Response>(
      {url: `/execute/list/v5`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model505
    },
      options);
    }
  
/**
 * Use this API to mint tokens. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks.
 * @summary Mint tokens
 */
const postExecuteMintV1 = (
    model516: BodyType<Model516>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteMintV1Response>(
      {url: `/execute/mint/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model516
    },
      options);
    }
  
/**
 * @summary Attach a signature to an existing permit
 */
const postExecutePermitsignatureV1 = (
    model519: BodyType<Model519>,
    params: PostExecutePermitsignatureV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/execute/permit-signature/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model519,
        params
    },
      options);
    }
  
/**
 * @summary Attach a signature to an existing pre-signature
 */
const postExecutePresignatureV1 = (
    model520: BodyType<Model520>,
    params: PostExecutePresignatureV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/execute/pre-signature/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model520,
        params
    },
      options);
    }
  
/**
 * @summary Send the success status of an execution
 */
const postExecuteResultsV1 = (
    model521: BodyType<Model521>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteResultsV1Response>(
      {url: `/execute/results/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model521
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Sell tokens (accept bids)
 */
const postExecuteSellV6 = (
    model524: BodyType<Model524>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteBuyV6Response>(
      {url: `/execute/sell/v6`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model524
    },
      options);
    }
  
/**
 * Use this API to accept bids. We recommend using the SDK over this API as the SDK will iterate through the steps and return callbacks. Please mark `excludeEOA` as `true` to exclude Blur orders.
 * @summary Sell tokens (accept bids)
 */
const postExecuteSellV7 = (
    model529: BodyType<Model529>,
 options?: SecondParameter<typeof client>,) => {
      return client<GetExecuteSellV7Response>(
      {url: `/execute/sell/v7`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model529
    },
      options);
    }
  
/**
 * @summary Indirectly fill an order via a solver
 */
const postExecuteSolveV1 = (
    model536: BodyType<Model536>,
    params?: PostExecuteSolveV1Params,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteSolveV1Response>(
      {url: `/execute/solve/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model536,
        params
    },
      options);
    }
  
/**
 * @summary Get the status of an execution
 */
const postExecuteStatusV1 = (
    model537: BodyType<Model537>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteStatusV1Response>(
      {url: `/execute/status/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model537
    },
      options);
    }
  
/**
 * @summary Batch transfer NFTs
 */
const postExecuteTransferV1 = (
    model540: BodyType<Model540>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteTransferV1Response>(
      {url: `/execute/transfer/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model540
    },
      options);
    }
  
/**
 * This API requires an allowed API key for execution. Please contact technical support with more questions.
 * @summary Disable or reenable metadata for a token
 */
const postTokensDisablemetadataV1 = (
    model546: BodyType<Model546>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/disable-metadata/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model546
    },
      options);
    }
  
/**
 * @summary Update token flag status
 */
const postTokensFlagV1 = (
    model547: BodyType<Model547>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/flag/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model547
    },
      options);
    }
  
/**
 * Token metadata is never automatically refreshed, but may be manually refreshed with this API.

Caution: This API should be used in moderation, like only when missing data is discovered. Calling it in bulk or programmatically will result in your API key getting rate limited.
 * @summary Refresh Token
 */
const postTokensRefreshV1 = (
    model548: BodyType<Model548>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/refresh/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model548
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Simulate the floor ask of any token
 */
const postTokensSimulatefloorV1 = (
    model549: BodyType<Model549>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/simulate-floor/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model549
    },
      options);
    }
  
/**
 * @deprecated
 * @summary Simulate the top bid of any token
 */
const postTokensSimulatetopbidV1 = (
    model550: BodyType<Model550>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/simulate-top-bid/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model550
    },
      options);
    }
  
/**
 * This API can be used by allowed API keys to update the spam status of a token.
 * @summary Update the tokens spam status
 */
const postTokensSpamstatusV1 = (
    model552: BodyType<Model552>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/tokens/spam-status/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model552
    },
      options);
    }
  
/**
 * Override collections metadata and royalties
 * @summary Override collections
 */
const postCollectionsCollectionOverrideV1 = (
    collection: string,
    model555: BodyType<Model555>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/collections/${collection}/override/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model555
    },
      options);
    }
  
/**
 * @summary Get the capacity for indirect filling via a solver
 */
const postExecuteSolveCapacityV1 = (
    model556: BodyType<Model556>,
 options?: SecondParameter<typeof client>,) => {
      return client<PostExecuteSolveCapacityV1Response>(
      {url: `/execute/solve/capacity/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model556
    },
      options);
    }
  
/**
 * @summary Simulate any given order
 */
const postManagementOrdersSimulateV1 = (
    model557: BodyType<Model557>,
 options?: SecondParameter<typeof client>,) => {
      return client<PutSetCollectionCommunityV1Response>(
      {url: `/management/orders/simulate/v1`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: model557
    },
      options);
    }
  
return {getAdminGetmarketplaces,getAdminOpenapi,getAdminRatelimitrules,getAssetsV1,getAttributesV1,getCollectionV1,getCollectionV2,getCollectionV3,getCollectionsV1,getCollectionsV2,getCollectionsV3,getCollectionsV4,getCollectionsV5,getCollectionsV6,getCollectionsV7,getCrosspostingordersV1,getOrdersV1,postOrdersV1,getOrdersV2,getOwnersV1,getOwnersV2,getSalesV1,getSalesV2,getSalesV3,getSalesV4,getSalesV5,getSalesV6,getSourcesV1,getStatsV1,getStatsV2,getTokensV1,getTokensV2,getTokensV3,getTokensV4,getTokensV5,getTokensV6,getTokensV7,getTransfersV2,getTransfersV3,getTransfersV4,getAdminGetapikeyKey,getAdminProvidermetadataType,getApikeysKeyRatelimits,getChainStatsV1,getCollectionsActivityV4,getCollectionsActivityV5,getCollectionsActivityV6,getCollectionsDailyvolumesV1,getCollectionsTopsellingV1,getCollectionsTopsellingV2,getCollectionsTrendingV1,getCollectionsTrendingmintsV1,getCollectionsCollectionorslugV1,getCurrenciesConversionV1,getEventsAsksV2,getEventsAsksV3,getEventsBidsV1,getEventsBidsV2,getEventsBidsV3,getEventsOrdersV1,getExecuteCancelV2,getLiquidityUsersV1,getLiquidityUsersV2,getOrdersAllV1,getOrdersAllV2,getOrdersAsksV1,getOrdersAsksV2,getOrdersAsksV3,getOrdersAsksV4,getOrdersAsksV5,getOrdersBidsV1,getOrdersBidsV2,getOrdersBidsV3,getOrdersBidsV4,getOrdersBidsV5,getOrdersBidsV6,getOrdersDepthV1,getOrdersExecutedV1,getOwnersCommoncollectionsV1,getOwnersCountV1,getOwnersCrosscollectionsV1,getRedirectLogoV1,getRedirectTokenV1,getSalesBulkV1,getSearchActivitiesV1,getSearchCollectionsV1,getSearchCollectionsV2,getSyncAsksV1,getTokensBootstrapV1,getTokensDetailsV2,getTokensDetailsV3,getTokensDetailsV4,getTokensFloorV1,getTokensIdsV1,getTransfersBulkV1,getTransfersBulkV2,getUsersActivityV2,getUsersActivityV3,getUsersActivityV4,getUsersActivityV5,getUsersActivityV6,getCollectionsCollectionMarketplaceconfigurationsV1,getCollectionsCollectionOwnersdistributionV1,getCollectionsCollectionActivityV3,getCollectionsCollectionActivityV1,getCollectionsCollectionActivityV2,getCollectionsCollectionAttributesV1,getCollectionsCollectionTopbidsV1,getCollectionsCollectionSupportedmarketplacesV1,getCollectionssetsCollectionssetidOwnersdistributionV1,getEventsCollectionsFlooraskV1,getEventsCollectionsFlooraskV2,getEventsCollectionsTopbidV1,getEventsCollectionsTopbidV2,getEventsTokensFlooraskV2,getEventsTokensFlooraskV3,getEventsTokensFlooraskV4,getOracleCollectionsBidaskmidpointV1,getOracleCollectionsFlooraskV4,getOracleCollectionsFlooraskV5,getOracleCollectionsFlooraskV6,getOracleCollectionsTopbidV2,getOracleCollectionsTopbidV3,getOracleTokensStatusV2,getOracleTokensStatusV3,getTokensFlagChangesV1,getTokensTokenActivityV5,getTokensTokenActivityV3,getTokensTokenActivityV1,getTokensTokenActivityV2,getTokensTokenActivityV4,getTransactionsTxhashSyncedV1,getUsersUserTokensV6,getUsersUserTokensV4,getUsersUserTokensV2,getUsersUserPositionsV1,getUsersUserCollectionsV3,getUsersUserCollectionsV1,getUsersUserActivityV1,getUsersUserCollectionsV2,getUsersUserTokensV1,getUsersUserTokensV3,getUsersUserTokensV5,getUsersUserTokensV7,getCollectionsCollectionAttributesExploreV5,getCollectionsCollectionAttributesExploreV3,getCollectionsCollectionAttributesExploreV1,getCollectionsCollectionAttributesStaticV1,getCollectionsCollectionAttributesAllV3,getCollectionsCollectionAttributesAllV1,getCollectionsCollectionAttributesAllV2,getCollectionsCollectionAttributesAllV4,getCollectionsCollectionAttributesExploreV2,getCollectionsCollectionAttributesExploreV4,getOrdersUsersUserTopbidsV4,getOrdersUsersUserTopbidsV2,getOrdersUsersUserTopbidsV1,getOrdersUsersUserTopbidsV3,getRedirectCollectionsCollectionImageV1,getRedirectCurrencyAddressIconV1,getRedirectSourcesSourceLogoV2,getRedirectTokensTokenImageV1,getRedirectSourcesSourceTokensTokenLinkV2,putCollectionsCollectionCommunityV1,postApikeys,postAdminCalcrarity,postAdminCreateratelimitrule,postAdminDeleteratelimitrule,postAdminFixblocks,postAdminFixcache,postAdminFixorders,postAdminFixtokencache,postAdminIndexmetadata,postAdminPauserabbitqueue,postAdminRefreshcollection,postAdminRefreshtoken,postAdminResumerabbitqueue,postAdminResyncfloorevents,postAdminResyncnftbalances,postAdminResyncsaleroyalties,postAdminResyncsource,postAdminResyncuserbalance,postAdminRetryrabbitqueue,postAdminRevalidateorder,postAdminRouters,postAdminSetcommunity,postAdminSyncdailyvolumes,postAdminSyncevents,postAdminTriggerjob,postAdminTriggerrabbitjob,postAdminUpdateapikey,postAdminUpdateimageversion,postAdminUpdateratelimitrule,postAdminUpdatesource,postCollectionssetsV1,postContractssetsV1,postOrderV2,postOrderV3,postOrderV4,postSeaportOffers,postTokensetsV1,postTokensetsV2,postAdminApikeysMetrics,postCollectionsDisablemetadataV1,postCollectionsRefreshV1,postCollectionsRefreshV2,postCollectionsSpamstatusV1,postExecuteAuthsignatureV1,postExecuteBidV4,postExecuteBidV5,postExecuteBuyV5,postExecuteBuyV6,postExecuteBuyV7,postExecuteCancelV3,postExecuteCancelimtblV1,postExecuteCancelsignatureV1,postExecuteListV4,postExecuteListV5,postExecuteMintV1,postExecutePermitsignatureV1,postExecutePresignatureV1,postExecuteResultsV1,postExecuteSellV6,postExecuteSellV7,postExecuteSolveV1,postExecuteStatusV1,postExecuteTransferV1,postTokensDisablemetadataV1,postTokensFlagV1,postTokensRefreshV1,postTokensSimulatefloorV1,postTokensSimulatetopbidV1,postTokensSpamstatusV1,postCollectionsCollectionOverrideV1,postExecuteSolveCapacityV1,postManagementOrdersSimulateV1}};
export type GetAdminGetmarketplacesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAdminGetmarketplaces']>>>
export type GetAdminOpenapiResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAdminOpenapi']>>>
export type GetAdminRatelimitrulesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAdminRatelimitrules']>>>
export type GetAssetsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAssetsV1']>>>
export type GetAttributesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAttributesV1']>>>
export type GetCollectionV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionV1']>>>
export type GetCollectionV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionV2']>>>
export type GetCollectionV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionV3']>>>
export type GetCollectionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV1']>>>
export type GetCollectionsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV2']>>>
export type GetCollectionsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV3']>>>
export type GetCollectionsV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV4']>>>
export type GetCollectionsV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV5']>>>
export type GetCollectionsV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV6']>>>
export type GetCollectionsV7Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsV7']>>>
export type GetCrosspostingordersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCrosspostingordersV1']>>>
export type GetOrdersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersV1']>>>
export type PostOrdersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postOrdersV1']>>>
export type GetOrdersV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersV2']>>>
export type GetOwnersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOwnersV1']>>>
export type GetOwnersV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOwnersV2']>>>
export type GetSalesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV1']>>>
export type GetSalesV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV2']>>>
export type GetSalesV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV3']>>>
export type GetSalesV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV4']>>>
export type GetSalesV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV5']>>>
export type GetSalesV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesV6']>>>
export type GetSourcesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSourcesV1']>>>
export type GetStatsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getStatsV1']>>>
export type GetStatsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getStatsV2']>>>
export type GetTokensV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV1']>>>
export type GetTokensV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV2']>>>
export type GetTokensV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV3']>>>
export type GetTokensV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV4']>>>
export type GetTokensV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV5']>>>
export type GetTokensV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV6']>>>
export type GetTokensV7Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensV7']>>>
export type GetTransfersV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransfersV2']>>>
export type GetTransfersV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransfersV3']>>>
export type GetTransfersV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransfersV4']>>>
export type GetAdminGetapikeyKeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAdminGetapikeyKey']>>>
export type GetAdminProvidermetadataTypeResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getAdminProvidermetadataType']>>>
export type GetApikeysKeyRatelimitsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getApikeysKeyRatelimits']>>>
export type GetChainStatsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getChainStatsV1']>>>
export type GetCollectionsActivityV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsActivityV4']>>>
export type GetCollectionsActivityV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsActivityV5']>>>
export type GetCollectionsActivityV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsActivityV6']>>>
export type GetCollectionsDailyvolumesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsDailyvolumesV1']>>>
export type GetCollectionsTopsellingV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsTopsellingV1']>>>
export type GetCollectionsTopsellingV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsTopsellingV2']>>>
export type GetCollectionsTrendingV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsTrendingV1']>>>
export type GetCollectionsTrendingmintsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsTrendingmintsV1']>>>
export type GetCollectionsCollectionorslugV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionorslugV1']>>>
export type GetCurrenciesConversionV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCurrenciesConversionV1']>>>
export type GetEventsAsksV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsAsksV2']>>>
export type GetEventsAsksV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsAsksV3']>>>
export type GetEventsBidsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsBidsV1']>>>
export type GetEventsBidsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsBidsV2']>>>
export type GetEventsBidsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsBidsV3']>>>
export type GetEventsOrdersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsOrdersV1']>>>
export type GetExecuteCancelV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getExecuteCancelV2']>>>
export type GetLiquidityUsersV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getLiquidityUsersV1']>>>
export type GetLiquidityUsersV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getLiquidityUsersV2']>>>
export type GetOrdersAllV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAllV1']>>>
export type GetOrdersAllV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAllV2']>>>
export type GetOrdersAsksV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAsksV1']>>>
export type GetOrdersAsksV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAsksV2']>>>
export type GetOrdersAsksV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAsksV3']>>>
export type GetOrdersAsksV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAsksV4']>>>
export type GetOrdersAsksV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersAsksV5']>>>
export type GetOrdersBidsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV1']>>>
export type GetOrdersBidsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV2']>>>
export type GetOrdersBidsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV3']>>>
export type GetOrdersBidsV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV4']>>>
export type GetOrdersBidsV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV5']>>>
export type GetOrdersBidsV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersBidsV6']>>>
export type GetOrdersDepthV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersDepthV1']>>>
export type GetOrdersExecutedV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersExecutedV1']>>>
export type GetOwnersCommoncollectionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOwnersCommoncollectionsV1']>>>
export type GetOwnersCountV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOwnersCountV1']>>>
export type GetOwnersCrosscollectionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOwnersCrosscollectionsV1']>>>
export type GetRedirectLogoV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectLogoV1']>>>
export type GetRedirectTokenV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectTokenV1']>>>
export type GetSalesBulkV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSalesBulkV1']>>>
export type GetSearchActivitiesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSearchActivitiesV1']>>>
export type GetSearchCollectionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSearchCollectionsV1']>>>
export type GetSearchCollectionsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSearchCollectionsV2']>>>
export type GetSyncAsksV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getSyncAsksV1']>>>
export type GetTokensBootstrapV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensBootstrapV1']>>>
export type GetTokensDetailsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensDetailsV2']>>>
export type GetTokensDetailsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensDetailsV3']>>>
export type GetTokensDetailsV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensDetailsV4']>>>
export type GetTokensFloorV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensFloorV1']>>>
export type GetTokensIdsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensIdsV1']>>>
export type GetTransfersBulkV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransfersBulkV1']>>>
export type GetTransfersBulkV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransfersBulkV2']>>>
export type GetUsersActivityV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersActivityV2']>>>
export type GetUsersActivityV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersActivityV3']>>>
export type GetUsersActivityV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersActivityV4']>>>
export type GetUsersActivityV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersActivityV5']>>>
export type GetUsersActivityV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersActivityV6']>>>
export type GetCollectionsCollectionMarketplaceconfigurationsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionMarketplaceconfigurationsV1']>>>
export type GetCollectionsCollectionOwnersdistributionV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionOwnersdistributionV1']>>>
export type GetCollectionsCollectionActivityV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionActivityV3']>>>
export type GetCollectionsCollectionActivityV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionActivityV1']>>>
export type GetCollectionsCollectionActivityV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionActivityV2']>>>
export type GetCollectionsCollectionAttributesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesV1']>>>
export type GetCollectionsCollectionTopbidsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionTopbidsV1']>>>
export type GetCollectionsCollectionSupportedmarketplacesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionSupportedmarketplacesV1']>>>
export type GetCollectionssetsCollectionssetidOwnersdistributionV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionssetsCollectionssetidOwnersdistributionV1']>>>
export type GetEventsCollectionsFlooraskV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsCollectionsFlooraskV1']>>>
export type GetEventsCollectionsFlooraskV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsCollectionsFlooraskV2']>>>
export type GetEventsCollectionsTopbidV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsCollectionsTopbidV1']>>>
export type GetEventsCollectionsTopbidV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsCollectionsTopbidV2']>>>
export type GetEventsTokensFlooraskV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsTokensFlooraskV2']>>>
export type GetEventsTokensFlooraskV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsTokensFlooraskV3']>>>
export type GetEventsTokensFlooraskV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getEventsTokensFlooraskV4']>>>
export type GetOracleCollectionsBidaskmidpointV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsBidaskmidpointV1']>>>
export type GetOracleCollectionsFlooraskV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsFlooraskV4']>>>
export type GetOracleCollectionsFlooraskV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsFlooraskV5']>>>
export type GetOracleCollectionsFlooraskV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsFlooraskV6']>>>
export type GetOracleCollectionsTopbidV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsTopbidV2']>>>
export type GetOracleCollectionsTopbidV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleCollectionsTopbidV3']>>>
export type GetOracleTokensStatusV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleTokensStatusV2']>>>
export type GetOracleTokensStatusV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOracleTokensStatusV3']>>>
export type GetTokensFlagChangesV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensFlagChangesV1']>>>
export type GetTokensTokenActivityV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensTokenActivityV5']>>>
export type GetTokensTokenActivityV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensTokenActivityV3']>>>
export type GetTokensTokenActivityV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensTokenActivityV1']>>>
export type GetTokensTokenActivityV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensTokenActivityV2']>>>
export type GetTokensTokenActivityV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTokensTokenActivityV4']>>>
export type GetTransactionsTxhashSyncedV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getTransactionsTxhashSyncedV1']>>>
export type GetUsersUserTokensV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV6']>>>
export type GetUsersUserTokensV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV4']>>>
export type GetUsersUserTokensV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV2']>>>
export type GetUsersUserPositionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserPositionsV1']>>>
export type GetUsersUserCollectionsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserCollectionsV3']>>>
export type GetUsersUserCollectionsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserCollectionsV1']>>>
export type GetUsersUserActivityV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserActivityV1']>>>
export type GetUsersUserCollectionsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserCollectionsV2']>>>
export type GetUsersUserTokensV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV1']>>>
export type GetUsersUserTokensV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV3']>>>
export type GetUsersUserTokensV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV5']>>>
export type GetUsersUserTokensV7Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getUsersUserTokensV7']>>>
export type GetCollectionsCollectionAttributesExploreV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesExploreV5']>>>
export type GetCollectionsCollectionAttributesExploreV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesExploreV3']>>>
export type GetCollectionsCollectionAttributesExploreV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesExploreV1']>>>
export type GetCollectionsCollectionAttributesStaticV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesStaticV1']>>>
export type GetCollectionsCollectionAttributesAllV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesAllV3']>>>
export type GetCollectionsCollectionAttributesAllV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesAllV1']>>>
export type GetCollectionsCollectionAttributesAllV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesAllV2']>>>
export type GetCollectionsCollectionAttributesAllV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesAllV4']>>>
export type GetCollectionsCollectionAttributesExploreV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesExploreV2']>>>
export type GetCollectionsCollectionAttributesExploreV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getCollectionsCollectionAttributesExploreV4']>>>
export type GetOrdersUsersUserTopbidsV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersUsersUserTopbidsV4']>>>
export type GetOrdersUsersUserTopbidsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersUsersUserTopbidsV2']>>>
export type GetOrdersUsersUserTopbidsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersUsersUserTopbidsV1']>>>
export type GetOrdersUsersUserTopbidsV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getOrdersUsersUserTopbidsV3']>>>
export type GetRedirectCollectionsCollectionImageV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectCollectionsCollectionImageV1']>>>
export type GetRedirectCurrencyAddressIconV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectCurrencyAddressIconV1']>>>
export type GetRedirectSourcesSourceLogoV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectSourcesSourceLogoV2']>>>
export type GetRedirectTokensTokenImageV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectTokensTokenImageV1']>>>
export type GetRedirectSourcesSourceTokensTokenLinkV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['getRedirectSourcesSourceTokensTokenLinkV2']>>>
export type PutCollectionsCollectionCommunityV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['putCollectionsCollectionCommunityV1']>>>
export type PostApikeysResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postApikeys']>>>
export type PostAdminCalcrarityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminCalcrarity']>>>
export type PostAdminCreateratelimitruleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminCreateratelimitrule']>>>
export type PostAdminDeleteratelimitruleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminDeleteratelimitrule']>>>
export type PostAdminFixblocksResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminFixblocks']>>>
export type PostAdminFixcacheResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminFixcache']>>>
export type PostAdminFixordersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminFixorders']>>>
export type PostAdminFixtokencacheResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminFixtokencache']>>>
export type PostAdminIndexmetadataResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminIndexmetadata']>>>
export type PostAdminPauserabbitqueueResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminPauserabbitqueue']>>>
export type PostAdminRefreshcollectionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminRefreshcollection']>>>
export type PostAdminRefreshtokenResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminRefreshtoken']>>>
export type PostAdminResumerabbitqueueResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResumerabbitqueue']>>>
export type PostAdminResyncflooreventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResyncfloorevents']>>>
export type PostAdminResyncnftbalancesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResyncnftbalances']>>>
export type PostAdminResyncsaleroyaltiesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResyncsaleroyalties']>>>
export type PostAdminResyncsourceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResyncsource']>>>
export type PostAdminResyncuserbalanceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminResyncuserbalance']>>>
export type PostAdminRetryrabbitqueueResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminRetryrabbitqueue']>>>
export type PostAdminRevalidateorderResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminRevalidateorder']>>>
export type PostAdminRoutersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminRouters']>>>
export type PostAdminSetcommunityResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminSetcommunity']>>>
export type PostAdminSyncdailyvolumesResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminSyncdailyvolumes']>>>
export type PostAdminSynceventsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminSyncevents']>>>
export type PostAdminTriggerjobResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminTriggerjob']>>>
export type PostAdminTriggerrabbitjobResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminTriggerrabbitjob']>>>
export type PostAdminUpdateapikeyResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminUpdateapikey']>>>
export type PostAdminUpdateimageversionResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminUpdateimageversion']>>>
export type PostAdminUpdateratelimitruleResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminUpdateratelimitrule']>>>
export type PostAdminUpdatesourceResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminUpdatesource']>>>
export type PostCollectionssetsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionssetsV1']>>>
export type PostContractssetsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postContractssetsV1']>>>
export type PostOrderV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postOrderV2']>>>
export type PostOrderV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postOrderV3']>>>
export type PostOrderV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postOrderV4']>>>
export type PostSeaportOffersResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postSeaportOffers']>>>
export type PostTokensetsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensetsV1']>>>
export type PostTokensetsV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensetsV2']>>>
export type PostAdminApikeysMetricsResult = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postAdminApikeysMetrics']>>>
export type PostCollectionsDisablemetadataV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionsDisablemetadataV1']>>>
export type PostCollectionsRefreshV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionsRefreshV1']>>>
export type PostCollectionsRefreshV2Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionsRefreshV2']>>>
export type PostCollectionsSpamstatusV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionsSpamstatusV1']>>>
export type PostExecuteAuthsignatureV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteAuthsignatureV1']>>>
export type PostExecuteBidV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteBidV4']>>>
export type PostExecuteBidV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteBidV5']>>>
export type PostExecuteBuyV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteBuyV5']>>>
export type PostExecuteBuyV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteBuyV6']>>>
export type PostExecuteBuyV7Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteBuyV7']>>>
export type PostExecuteCancelV3Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteCancelV3']>>>
export type PostExecuteCancelimtblV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteCancelimtblV1']>>>
export type PostExecuteCancelsignatureV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteCancelsignatureV1']>>>
export type PostExecuteListV4Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteListV4']>>>
export type PostExecuteListV5Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteListV5']>>>
export type PostExecuteMintV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteMintV1']>>>
export type PostExecutePermitsignatureV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecutePermitsignatureV1']>>>
export type PostExecutePresignatureV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecutePresignatureV1']>>>
export type PostExecuteResultsV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteResultsV1']>>>
export type PostExecuteSellV6Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteSellV6']>>>
export type PostExecuteSellV7Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteSellV7']>>>
export type PostExecuteSolveV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteSolveV1']>>>
export type PostExecuteStatusV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteStatusV1']>>>
export type PostExecuteTransferV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteTransferV1']>>>
export type PostTokensDisablemetadataV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensDisablemetadataV1']>>>
export type PostTokensFlagV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensFlagV1']>>>
export type PostTokensRefreshV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensRefreshV1']>>>
export type PostTokensSimulatefloorV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensSimulatefloorV1']>>>
export type PostTokensSimulatetopbidV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensSimulatetopbidV1']>>>
export type PostTokensSpamstatusV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postTokensSpamstatusV1']>>>
export type PostCollectionsCollectionOverrideV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postCollectionsCollectionOverrideV1']>>>
export type PostExecuteSolveCapacityV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postExecuteSolveCapacityV1']>>>
export type PostManagementOrdersSimulateV1Result = NonNullable<Awaited<ReturnType<ReturnType<typeof getBeamReservoirAPI>['postManagementOrdersSimulateV1']>>>
